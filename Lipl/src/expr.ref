$EXTERN NewLabel, CompileLogicalExprEffective, GetConst, GetLocal;

$ENTRY CompileArgs {
    /* empty */ = /* empty */;
    e.ArgsBefore t.Arg = <CompileExpr t.Arg> <CompileArgs e.ArgsBefore>;
}

CompileTernaryCond {
    t.Cond t.OnTrue t.OnFalse
        , <NewLabel "cond"> : e.LabelFalse, <NewLabel "cond"> : e.LabelExit
        = <CompileLogicalExprEffective t.Cond (e.LabelFalse)>
          <CompileExpr t.OnTrue>
          e.LabelExit JMP
          ':' e.LabelFalse JMP
          <CompileExpr t.OnFalse>
          ':' e.LabelExit;
}

IsDigits {
    /* empty */ = True;

    s.Symbol e.Rest
        , <Type s.Symbol> : 'D' e.1
        = <IsDigits e.Rest>;

    e.Other = False;
}

IsRealNumber {
    s.Sign e.Rest
        , '+-' : e.1 s.Sign e.2
        = <IsRealNumber e.Rest>;
    
    e.FirstPart 'e' s.Sign e.IntDeg
        , '+-' : e.1 s.Sign e.2
        , <IsDigits e.IntDeg> : True
        = <IsRealNumber e.FirstPart>;

    e.IntPart '.' e.FracPart
        , <IsDigits e.IntPart> : True
        , <IsDigits e.FracPart> : True 
        = True;
    
    e.Other = False;
}

$ENTRY CompileExpr {
    s.Number, <Type s.Number> : 'N' e.1 = s.Number;

    s.Number, <IsRealNumber <Explode s.Number>> : True = s.Number;

    (t.Cond "?" t.OnTrue ":" t.OnFalse) = <CompileTernaryCond t.Cond t.OnTrue t.OnFalse>;

    s.Name, <GetConst s.Name> : Found (e.Number) = e.Number;
    
    s.Name, <GetLocal s.Name> : Found (s.Sign s.Offset)
          , ('+' ADD) ('-' SUB) : e.Before (s.Sign s.Operation) e.After
          = GETBP s.Offset s.Operation;

    s.Name = '_' s.Name;

    (L t.Expr) = <CompileExpr t.Expr> READ;

    ("-" t.Expr) = <CompileExpr t.Expr> NEG;
    (F "-" t.Expr) = <CompileExpr t.Expr> FNEG;

    (s.PreCrementOp t.Expr)
        , ("++" ADD) ("--" SUB) : e.Before (s.PreCrementOp s.Operation) e.After
         = <CompileExpr t.Expr> DUP READ 1 s.Operation DUP ROT SWAP WRITE;
    /* 
        &x --> &x &x --> &x x --> &x x 1 ADD -->
        &x x+1 --> &x x+1 x+1 --> x+1 x+1 &x --> x+1 &x x+1 --> x+1
    */

    (t.Expr s.PostCrementOp)
        , ("++" ADD) ("--" SUB) : e.Before (s.PostCrementOp s.Operation) e.After
        = <CompileExpr t.Expr> DUP READ DUP 1 s.Operation ROT SWAP WRITE;
    /* 
        &x --> &x &x --> &x x --> &x x x 1 ADD -->
        &x x x+1 --> x x+1 &x --> x &x x+1 --> x
    */

    (t.ExprLeft "=" t.ExprRight)
        = <CompileExpr t.ExprRight> <CompileExpr t.ExprLeft> OVER WRITE;
    /*
        y &x --> y &x y --> y  [x := y]
    */

    (t.ExprLeft s.BinOp t.ExprRight)
        , ("+" ADD) ("-" SUB) ("*" MUL) ("/" DIV) ("%" MOD)
          ("|" BITOR) ("&" BITAND) ("~" BITNOT)
        : e.Before (s.BinOp s.Command) e.After
        = <CompileExpr t.ExprLeft> <CompileExpr t.ExprRight> s.Command;

    (U t.ExprLeft s.BinOp t.ExprRight)
        , ("+" UADD) ("-" USUB) ("*" UMUL) ("/" UDIV) ("%" UMOD)
        : e.Before (s.BinOp s.Command) e.After
        = <CompileExpr t.ExprLeft> <CompileExpr t.ExprRight> s.Command;

    (F t.ExprLeft s.BinOp t.ExprRight)
        , ("+" FADD) ("-" FSUB) ("*" FMUL) ("/" FDIV)
        : e.Before (s.BinOp s.Command) e.After
        = <CompileExpr t.ExprLeft> <CompileExpr t.ExprRight> s.Command;

    (F-from-S t.Expr) = <CompileExpr t.Expr> S2F;
    (S-from-F t.Expr) = <CompileExpr t.Expr> F2S;
    (F-from-U t.Expr) = <CompileExpr t.Expr> U2F;
    (U-from-F t.Expr) = <CompileExpr t.Expr> F2U;

    (call t.Func e.Args) = <CompileArgs e.Args> <CompileExpr t.Func> CALL;

    (mcall t.ObjectPtr s.Method e.Args)
        = <CompileArgs e.Args> <CompileExpr t.ObjectPtr> DUP READ <CompileExpr s.Method> ADD READ CALL;
}
